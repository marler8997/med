pub fn tokenize(row_str: []const u8, start: usize) highlight.Token {
    var tokenizer = aro.Tokenizer{
        .buf = row_str,
        .index = @intCast(start),
        .source = .unused,
        .langopts = .{},
    };
    const token = tokenizer.next();
    std.debug.assert(token.start >= start);
    switch (token.id) {
        .eof => {
            if (std.mem.indexOf(u8, row_str, "//")) |comment_start| {
                if (comment_start == 0) return .{ .kind = .comment, .end = row_str.len };
                return .{ .kind = .unknown, .end = comment_start };
            }
        },
        else => {},
    }
    return .{ .kind = tokenKindFromId(token.id), .end = token.end };
}

fn tokenKindFromId(id: aro.Tokenizer.Token.Id) highlight.TokenKind {
    return switch (id) {
        .invalid,
        .nl,
        .whitespace,
        .eof,
        .identifier,
        .extended_identifier,
        => .todo,
        .string_literal,
        .string_literal_utf_16,
        .string_literal_utf_8,
        .string_literal_utf_32,
        .string_literal_wide,
        .unterminated_string_literal,
        .macro_string,
        .char_literal,
        .char_literal_utf_8,
        .char_literal_utf_16,
        .char_literal_utf_32,
        .char_literal_wide,
        .empty_char_literal,
        .unterminated_char_literal,
        => .string_literal,
        .unterminated_comment,
        => .comment,
        .one,
        .zero,
        .bang,
        .bang_equal,
        .pipe,
        .pipe_pipe,
        .pipe_equal,
        .equal,
        .equal_equal,
        .l_paren,
        .r_paren,
        .l_brace,
        .r_brace,
        .l_bracket,
        .r_bracket,
        .period,
        .ellipsis,
        .caret,
        .caret_equal,
        .plus,
        .plus_plus,
        .plus_equal,
        .minus,
        .minus_minus,
        .minus_equal,
        .asterisk,
        .asterisk_equal,
        .percent,
        .percent_equal,
        .arrow,
        .colon,
        .colon_colon,
        .semicolon,
        .slash,
        .slash_equal,
        .comma,
        .ampersand,
        .ampersand_ampersand,
        .ampersand_equal,
        .question_mark,
        .angle_bracket_left,
        .angle_bracket_left_equal,
        .angle_bracket_angle_bracket_left,
        .angle_bracket_angle_bracket_left_equal,
        .angle_bracket_right,
        .angle_bracket_right_equal,
        .angle_bracket_angle_bracket_right,
        .angle_bracket_angle_bracket_right_equal,
        .tilde,
        .hash,
        .hash_hash,
        => .operator,
        .macro_param,
        .macro_param_no_expand,
        .stringify_param,
        .stringify_va_args,
        .macro_ws,
        .macro_param_has_attribute,
        .macro_param_has_c_attribute,
        .macro_param_has_declspec_attribute,
        .macro_param_has_warning,
        .macro_param_has_feature,
        .macro_param_has_extension,
        .macro_param_has_builtin,
        .macro_param_has_include,
        .macro_param_has_include_next,
        .macro_param_has_embed,
        .macro_param_is_identifier,
        .macro_file,
        .macro_line,
        .macro_counter,
        .macro_param_pragma_operator,
        .macro_param_ms_identifier,
        .macro_param_ms_pragma,
        .macro_func,
        .macro_function,
        .macro_pretty_func,
        .macro_date,
        .macro_time,
        .macro_timestamp,
        => .todo,
        .keyword_auto,
        .keyword_auto_type,
        .keyword_break,
        .keyword_case,
        .keyword_char,
        .keyword_const,
        .keyword_continue,
        .keyword_default,
        .keyword_do,
        .keyword_double,
        .keyword_else,
        .keyword_enum,
        .keyword_extern,
        .keyword_float,
        .keyword_for,
        .keyword_goto,
        .keyword_if,
        .keyword_int,
        .keyword_long,
        .keyword_register,
        .keyword_return,
        .keyword_short,
        .keyword_signed,
        .keyword_signed1,
        .keyword_signed2,
        .keyword_sizeof,
        .keyword_static,
        .keyword_struct,
        .keyword_switch,
        .keyword_typedef,
        .keyword_typeof1,
        .keyword_typeof2,
        .keyword_union,
        .keyword_unsigned,
        .keyword_void,
        .keyword_volatile,
        .keyword_while,
        .keyword_bool,
        .keyword_complex,
        .keyword_imaginary,
        .keyword_inline,
        .keyword_restrict,
        .keyword_alignas,
        .keyword_alignof,
        .keyword_atomic,
        .keyword_generic,
        .keyword_noreturn,
        .keyword_static_assert,
        .keyword_thread_local,
        .keyword_bit_int,
        .keyword_c23_alignas,
        .keyword_c23_alignof,
        .keyword_c23_bool,
        .keyword_c23_static_assert,
        .keyword_c23_thread_local,
        .keyword_constexpr,
        .keyword_true,
        .keyword_false,
        .keyword_nullptr,
        .keyword_typeof_unqual,
        .keyword_include,
        .keyword_include_next,
        .keyword_embed,
        .keyword_define,
        .keyword_defined,
        .keyword_undef,
        .keyword_ifdef,
        .keyword_ifndef,
        .keyword_elif,
        .keyword_elifdef,
        .keyword_elifndef,
        .keyword_endif,
        .keyword_error,
        .keyword_warning,
        .keyword_pragma,
        .keyword_line,
        .keyword_va_args,
        .keyword_va_opt,
        .keyword_const1,
        .keyword_const2,
        .keyword_inline1,
        .keyword_inline2,
        .keyword_volatile1,
        .keyword_volatile2,
        .keyword_restrict1,
        .keyword_restrict2,
        .keyword_alignof1,
        .keyword_alignof2,
        .keyword_typeof,
        .keyword_attribute1,
        .keyword_attribute2,
        .keyword_extension,
        .keyword_asm,
        .keyword_asm1,
        .keyword_asm2,
        .keyword_float128_1,
        .keyword_float128_2,
        .keyword_int128,
        .keyword_imag1,
        .keyword_imag2,
        .keyword_real1,
        .keyword_real2,
        .keyword_float16,
        .keyword_fp16,
        .keyword_declspec,
        .keyword_int64,
        .keyword_int64_2,
        .keyword_int32,
        .keyword_int32_2,
        .keyword_int16,
        .keyword_int16_2,
        .keyword_int8,
        .keyword_int8_2,
        .keyword_stdcall,
        .keyword_stdcall2,
        .keyword_thiscall,
        .keyword_thiscall2,
        .keyword_vectorcall,
        .keyword_vectorcall2,
        .keyword_fastcall,
        .keyword_fastcall2,
        .keyword_regcall,
        .keyword_cdecl,
        .keyword_cdecl2,
        .keyword_forceinline,
        .keyword_forceinline2,
        .keyword_unaligned,
        .keyword_unaligned2,
        .keyword_nonnull,
        .keyword_nullable,
        .keyword_nullable_result,
        .keyword_null_unspecified,
        => .keyword,
        .embed_byte,
        .pp_num,
        .placemarker,
        .include_start,
        .include_resume,
        => .todo,
        .comment => .comment,
        .incomplete_ucn,
        => .todo,
    };
}

const std = @import("std");
const aro = @import("aro");
const highlight = @import("../highlight.zig");
